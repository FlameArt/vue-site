require('dotenv').config()
const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const microcache = require('route-cache')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')

// Создаём глобальный фетч объект, нужен для простых запросов и для работы REST`а в среде Node
global.fetch = require('node-fetch');


const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

// Читаем конфиг
global.SERVER_CONFIG = JSON.parse(fs.readFileSync("./src/config.json"));
global.SERVER_IS_PROD = isProd;

// Устанавливаем для удобства быструю глобальную переменную, чекающую сервер это или браузер
global.IS_BROWSER = false;
global.IS_SERVER = true;


// Создаём новый REST, в зависимости от среды [dev\prod]
global.REST = new (GetES6Class('./src/libs/REST.js'))(!isProd ? global.SERVER_CONFIG.dev.REST_SERVER : global.SERVER_CONFIG.prod.REST_SERVER);


// Получаем оригинальный REST-класс для работы в Node среде
function GetES6Class(file) {
  let filedata = fs.readFileSync(file,'utf8');
  let _className = filedata.match(/export default class (.*?)( |\r|\n)/);
  let _class_string = filedata.replace(_className[0],'class ' + _className[1]);
  _class_string += "\n\n\n" + "module.exports="+_className[1];
  let _class = eval(_class_string);
  return _class;
}

// Предзагружаем данные
global.SERVER_PRELOADED_DATA = new (require('./src/store/server-preload'));
global.SERVER_PRELOADED_DATA.run();



const app = express()

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false,
    inject: true
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/logo-48.png'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))

function render (req, res) {
  const s = Date.now()

  res.setHeader('Content-Type', 'text/html')
  res.setHeader('Server', serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }

    const { htmlAttrs } = context.meta.inject()

    // vue-meta support
    res.send(`
      <!DOCTYPE html>
      <html data-vue-meta-server-rendered ${htmlAttrs.text()}>
        ${html}
      </html>
    `)

    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})

const port = process.env.PORT || 7070
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})

// Начальная конвертация SiteMap и Robots
const Sitemaps = new (require('./sitemap'));
Sitemaps.start();

// Обновления раз в полчаса
setInterval(async function f() {
  await Sitemaps.start();
}, 1000 * 60 * 30);